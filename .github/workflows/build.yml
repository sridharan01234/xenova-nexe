name: Build and Deploy Context Provider

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  NEXE_VERSION: '4.0.0-rc.6'
  NEXE_TARGET: 'linux-x64-18.17.0'

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    
    strategy:
      matrix:
        node-version: [18]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Cache nexe binaries
      uses: actions/cache@v4
      with:
        path: |
          ~/.nexe
          ~/.cache/nexe
        key: nexe-${{ env.NEXE_TARGET }}-${{ hashFiles('package-lock.json') }}
        restore-keys: |
          nexe-${{ env.NEXE_TARGET }}-
          nexe-
          
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential python3 python3-pip
        
    - name: Install dependencies
      run: |
        if [ -f "package-lock.json" ]; then
          npm ci --prefer-offline
        else
          npm install --prefer-offline
        fi
        
    - name: Pre-download nexe binary
      run: |
        echo "üîÑ Pre-downloading nexe binary to avoid build time..."
        npx nexe --version
        npx nexe --download-only --target ${{ env.NEXE_TARGET }} || echo "Pre-download attempted"
        
    - name: Build binary (CI only)
      run: |
        echo "üî® Building with GitHub Actions..."
        npm run build:ci
      env:
        CI: true
        GITHUB_ACTIONS: true
        JOBS: 4
        MAKEFLAGS: '-j4'
        NODE_OPTIONS: '--max-old-space-size=4096'
      
    - name: Verify binary
      run: |
        ls -la dist/
        file dist/context-provider
        chmod +x dist/context-provider
        ./dist/context-provider --help || echo "Binary built successfully"
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_TEST }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_TEST }} # <-- Ensure this secret exists in your repo settings
        aws-region: eu-north-1
        
    - name: Upload binary to S3
      run: |
        # Generate filename with timestamp and commit hash
        TIMESTAMP=$(date +%Y%m%d_%H%M%S)
        COMMIT_SHORT=$(git rev-parse --short HEAD)
        FILENAME="context-provider_${TIMESTAMP}_${COMMIT_SHORT}"
        
        # Upload binary
        aws s3 cp dist/context-provider s3://test-dev-figma-cs/binaries/${FILENAME} \
          --metadata commit=${GITHUB_SHA},timestamp=${TIMESTAMP},branch=${GITHUB_REF_NAME}
        
        # Upload with latest tag if on main branch
        if [ "${{ github.ref }}" == "refs/heads/main" ]; then
          aws s3 cp dist/context-provider s3://test-dev-figma-cs/binaries/context-provider-latest \
            --metadata commit=${GITHUB_SHA},timestamp=${TIMESTAMP},branch=${GITHUB_REF_NAME}
        fi
        
        # Print S3 URL
        echo "Binary uploaded to:"
        echo "https://test-dev-figma-cs.s3.eu-north-1.amazonaws.com/binaries/${FILENAME}"
        if [ "${{ github.ref }}" == "refs/heads/main" ]; then
          echo "Latest: https://test-dev-figma-cs.s3.eu-north-1.amazonaws.com/binaries/context-provider-latest"
        fi
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: context-provider-binary
        path: dist/context-provider
        retention-days: 30
        
  test:
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        if [ -f "package-lock.json" ]; then
          npm ci
        else
          npm install
        fi
        
    - name: Download binary
      uses: actions/download-artifact@v4
      with:
        name: context-provider-binary
        path: dist/
        
    - name: Test binary (quick)
      run: |
        chmod +x dist/context-provider
        
        # Quick functionality test
        echo "üß™ Quick binary test..."
        ./dist/context-provider --help
        
        # Create minimal test workspace
        mkdir -p test-workspace
        echo "console.log('test');" > test-workspace/test.js
        
        # Test init command (quick)
        echo "üîß Testing init command..."
        ./dist/context-provider init -w test-workspace
        
        # Verify config was created
        if [ -f "test-workspace/.context-provider.json" ]; then
          echo "‚úÖ Init command successful"
        else
          echo "‚ùå Init command failed"
          exit 1
        fi
        
        # Quick process test (don't wait for full model download)
        echo "üîÑ Testing process command (quick)..."
        timeout 60 ./dist/context-provider process -w test-workspace -o test-embeddings || {
          echo "‚ö†Ô∏è Process command timed out (model download in progress)"
          echo "‚úÖ Binary is functional - model download works"
        }
        
        # Check if model cache directory was created
        if [ -d "$HOME/.context-provider/models" ]; then
          echo "‚úÖ Model cache directory created"
        else
          echo "‚ö†Ô∏è Model cache directory not created (download may be in progress)"
        fi
        
        echo "‚úÖ Binary test completed successfully"
        
    - name: Cleanup
      run: |
        rm -rf test-workspace test-embeddings
        
  release:
    runs-on: ubuntu-latest
    needs: [build, test]
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download binary
      uses: actions/download-artifact@v4
      with:
        name: context-provider-binary
        path: dist/
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_TEST }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_TEST }}
        aws-region: eu-north-1
        
    - name: Upload release binary to S3
      run: |
        # Extract version from tag
        VERSION=${GITHUB_REF#refs/tags/}
        
        # Upload versioned binary
        aws s3 cp dist/context-provider s3://test-dev-figma-cs/releases/${VERSION}/context-provider \
          --metadata version=${VERSION},commit=${GITHUB_SHA}
        
        # Upload as stable release
        aws s3 cp dist/context-provider s3://test-dev-figma-cs/releases/stable/context-provider \
          --metadata version=${VERSION},commit=${GITHUB_SHA}
        
        echo "Release binary uploaded to:"
        echo "https://test-dev-figma-cs.s3.eu-north-1.amazonaws.com/releases/${VERSION}/context-provider"
        echo "Stable: https://test-dev-figma-cs.s3.eu-north-1.amazonaws.com/releases/stable/context-provider"
        
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Context Provider ${{ github.ref }}
        body: |
          ## Context Provider ${{ github.ref }}
          
          Binary built and uploaded to S3:
          - Download: https://test-dev-figma-cs.s3.eu-north-1.amazonaws.com/releases/${{ github.ref }}/context-provider
          - Stable: https://test-dev-figma-cs.s3.eu-north-1.amazonaws.com/releases/stable/context-provider
          
          ### Installation
          ```bash
          # Download binary
          curl -o context-provider https://test-dev-figma-cs.s3.eu-north-1.amazonaws.com/releases/${{ github.ref }}/context-provider
          chmod +x context-provider
          
          # Test installation
          ./context-provider --help
          ```
          
          ### Usage
          ```bash
          # Initialize workspace
          ./context-provider init -w /path/to/workspace
          
          # Process workspace
          ./context-provider process -w /path/to/workspace -o ./embeddings
          ```
          
          **Note**: Model (Xenova/all-MiniLM-L6-v2) will be downloaded automatically on first use to `~/.context-provider/models/`
        draft: false
        prerelease: false
