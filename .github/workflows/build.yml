name: Build and Deploy Context Provider

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  NEXE_VERSION: '4.0.0-beta.19'
  NEXE_TARGET: 'linux-x64-18.0.0'
  NEXE_CACHE_KEY: 'nexe-cache-v4'
  BUILD_CACHE_KEY: 'build-cache-v4'

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Advanced Nexe cache strategy
      uses: actions/cache@v4
      with:
        path: |
          ~/.nexe
          ~/.cache/nexe
          ./.nexe-temp
          ./node_modules/.cache
        key: ${{ env.NEXE_CACHE_KEY }}-${{ env.NEXE_TARGET }}-${{ hashFiles('package-lock.json', 'build-optimized.js') }}
        restore-keys: |
          ${{ env.NEXE_CACHE_KEY }}-${{ env.NEXE_TARGET }}-
          ${{ env.NEXE_CACHE_KEY }}-
          nexe-${{ env.NEXE_TARGET }}-
          
    - name: Cache Node.js build artifacts
      uses: actions/cache@v4
      with:
        path: |
          ~/.npm
          ~/.node-gyp
          /tmp/.node-gyp
        key: ${{ env.BUILD_CACHE_KEY }}-${{ env.NODE_VERSION }}-${{ hashFiles('package-lock.json') }}
        restore-keys: |
          ${{ env.BUILD_CACHE_KEY }}-${{ env.NODE_VERSION }}-
          ${{ env.BUILD_CACHE_KEY }}-
          
    - name: Install system dependencies (optimized)
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y --no-install-recommends \
          build-essential \
          python3 \
          python3-pip \
          ccache \
          ninja-build
        
        # Configure ccache for faster rebuilds
        echo 'export PATH="/usr/lib/ccache:$PATH"' >> ~/.bashrc
        export PATH="/usr/lib/ccache:$PATH"
        ccache --max-size=1G
        
    - name: Install dependencies (optimized)
      run: |
        # Use npm ci with optimizations
        npm ci --prefer-offline --no-audit --no-fund --silent
        
    - name: Validate Node.js environment
      run: |
        echo "üîç Validating Node.js environment..."
        node --version
        npm --version
        
        # Test basic Node.js functionality
        node -e "console.log('‚úÖ Node.js is working')"
        
        # Test the main entry point
        echo "üîß Testing main entry point..."
        node src/index.js --help
        
        # Check if nexe is available
        npx nexe --version
        
        echo "‚úÖ Environment validation passed!"
        
    - name: Pre-download and cache nexe binary
      run: |
        echo "üîÑ Preparing nexe for build from source..."
        
        # Set nexe cache directory
        export NEXE_CACHE_DIR="$HOME/.nexe"
        mkdir -p "$NEXE_CACHE_DIR"
        
        # Check if prebuilt binary exists (quick check)
        echo "üîç Checking for prebuilt binary availability..."
        PREBUILT_URL="https://github.com/nexe/nexe/releases/download/v${{ env.NEXE_VERSION }}/${{ env.NEXE_TARGET }}"
        
        if curl --head --silent --fail "$PREBUILT_URL" >/dev/null 2>&1; then
          echo "‚úÖ Prebuilt binary available, downloading..."
          npx nexe@${{ env.NEXE_VERSION }} --download-only --target ${{ env.NEXE_TARGET }}
        else
          echo "‚ö†Ô∏è Prebuilt binary not available for ${{ env.NEXE_VERSION }}, will build from source"
          echo "NEXE_BUILD_FROM_SOURCE=true" >> $GITHUB_ENV
        fi
        
        # List cached binaries
        ls -la "$NEXE_CACHE_DIR" || echo "No cache directory found"
        
    - name: Build debug binary (for troubleshooting)
      run: |
        echo "üîß Building debug binary for troubleshooting..."
        npm run build:debug
        
        if [ -f "dist/context-provider-debug" ]; then
          echo "‚úÖ Debug binary created!"
          chmod +x dist/context-provider-debug
          
          # Test debug binary
          echo "üß™ Testing debug binary..."
          timeout 10 ./dist/context-provider-debug --help 2>&1 | head -20
        else
          echo "‚ùå Debug binary not created"
        fi
        
    - name: Build binary (ultra-optimized)
      run: |
        echo "üî® Building with optimized configuration..."
        
        # Set build environment optimizations
        export NODE_OPTIONS="--max-old-space-size=6144"
        export MAKEFLAGS="-j$(nproc)"
        export JOBS=$(nproc)
        export CC="ccache gcc"
        export CXX="ccache g++"
        
        # Force build from source if prebuilt not available
        if [ "$NEXE_BUILD_FROM_SOURCE" = "true" ]; then
          echo "üîß Forcing build from source..."
          export NEXE_FORCE_BUILD=true
        fi
        
        # Debug: Check if source file exists
        echo "üîç Checking source files..."
        ls -la src/
        node -e "console.log('Node.js version:', process.version)"
        
        # Try simple build first
        echo "üîß Starting with simple build process..."
        npm run build:optimized || {
          echo "‚ö†Ô∏è Simple build failed, trying ultra-optimized..."
          npm run build:ultra || {
            echo "‚ö†Ô∏è Ultra-optimized build failed, trying manual build..."
            
            # Manual nexe build as last resort
            echo "üîß Attempting manual nexe build..."
            npx nexe src/index.js --target ${{ env.NEXE_TARGET }} --output dist/context-provider --verbose || {
              echo "‚ö†Ô∏è Manual build failed, trying with build flag..."
              npx nexe src/index.js --build --target ${{ env.NEXE_TARGET }} --output dist/context-provider --verbose
            }
          }
        }
        
        # Verify the binary was created
        if [ ! -f "dist/context-provider" ]; then
          echo "‚ùå Binary not created, build failed completely"
          exit 1
        fi
        
        echo "‚úÖ Binary created successfully!"
      env:
        CI: true
        GITHUB_ACTIONS: true
        NODE_OPTIONS: '--max-old-space-size=6144'
        NEXE_VERBOSE: true
        NEXE_TEMP: './.nexe-temp'
        UV_THREADPOOL_SIZE: 128
        
    - name: Verify binary (quick check)
      run: |
        echo "üîç Verifying binary..."
        ls -la dist/
        
        # Check if binary exists
        if [ ! -f "dist/context-provider" ]; then
          echo "‚ùå Binary not found!"
          exit 1
        fi
        
        # Check binary type and permissions
        file dist/context-provider
        chmod +x dist/context-provider
        
        # Check if it's actually executable
        if [ ! -x "dist/context-provider" ]; then
          echo "‚ùå Binary is not executable!"
          exit 1
        fi
        
        # Quick verification with timeout
        echo "üß™ Testing binary execution..."
        timeout 10 ./dist/context-provider --help > /dev/null 2>&1 || {
          EXIT_CODE=$?
          echo "‚ö†Ô∏è Binary test failed with exit code $EXIT_CODE"
          echo "üîç Checking for Node.js runtime issues..."
          
          # Check binary dependencies
          echo "Binary dependencies:"
          ldd dist/context-provider | head -10
          
          # Check if it's a valid ELF binary
          if file dist/context-provider | grep -q "ELF"; then
            echo "‚úÖ Valid ELF binary detected"
          else
            echo "‚ùå Not a valid ELF binary"
            exit 1
          fi
          
          # Try a simpler test
          echo "üîß Attempting basic execution test..."
          timeout 5 ./dist/context-provider 2>&1 | head -5
        }
        
        # Check binary size
        BINARY_SIZE=$(stat -c%s dist/context-provider)
        echo "üìä Binary size: $(numfmt --to=iec $BINARY_SIZE)"
        
        # Only strip if binary is working
        if timeout 5 ./dist/context-provider --help > /dev/null 2>&1; then
          echo "‚úÖ Binary is working, optimizing size..."
          strip dist/context-provider
          STRIPPED_SIZE=$(stat -c%s dist/context-provider)
          echo "üìä Stripped size: $(numfmt --to=iec $STRIPPED_SIZE)"
        else
          echo "‚ö†Ô∏è Binary not working properly, skipping strip"
        fi
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_TEST }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_TEST }} # <-- Ensure this secret exists in your repo settings
        aws-region: eu-north-1
        
    - name: Upload binary to S3
      run: |
        # Generate filename with timestamp and commit hash
        TIMESTAMP=$(date +%Y%m%d_%H%M%S)
        COMMIT_SHORT=$(git rev-parse --short HEAD)
        FILENAME="context-provider_${TIMESTAMP}_${COMMIT_SHORT}"
        
        # Upload binary
        aws s3 cp dist/context-provider s3://test-dev-figma-cs/binaries/${FILENAME} \
          --metadata commit=${GITHUB_SHA},timestamp=${TIMESTAMP},branch=${GITHUB_REF_NAME}
        
        # Upload with latest tag if on main branch
        if [ "${{ github.ref }}" == "refs/heads/main" ]; then
          aws s3 cp dist/context-provider s3://test-dev-figma-cs/binaries/context-provider-latest \
            --metadata commit=${GITHUB_SHA},timestamp=${TIMESTAMP},branch=${GITHUB_REF_NAME}
        fi
        
        # Print S3 URL
        echo "Binary uploaded to:"
        echo "https://test-dev-figma-cs.s3.eu-north-1.amazonaws.com/binaries/${FILENAME}"
        if [ "${{ github.ref }}" == "refs/heads/main" ]; then
          echo "Latest: https://test-dev-figma-cs.s3.eu-north-1.amazonaws.com/binaries/context-provider-latest"
        fi
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: context-provider-binary
        path: dist/context-provider
        retention-days: 30
        
  test:
    runs-on: ubuntu-latest
    needs: build
    timeout-minutes: 10  # Reduced from default
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies (minimal)
      run: |
        npm ci --only=production --silent --no-audit --no-fund
        
    - name: Download binary
      uses: actions/download-artifact@v4
      with:
        name: context-provider-binary
        path: dist/
        
    - name: Fast binary verification
      run: |
        chmod +x dist/context-provider
        
        echo "üß™ Lightning-fast binary test..."
        
        # Check if binary is valid before testing
        if ! file dist/context-provider | grep -q "ELF"; then
          echo "‚ùå Invalid binary format"
          exit 1
        fi
        
        # Test with better error handling
        echo "üîß Testing help command..."
        timeout 5 ./dist/context-provider --help 2>&1 | head -10 || {
          EXIT_CODE=$?
          echo "‚ö†Ô∏è Help command failed with exit code $EXIT_CODE"
          
          # Check for specific Nexe error
          if timeout 5 ./dist/context-provider --help 2>&1 | grep -q "Invalid Nexe binary"; then
            echo "‚ùå Invalid Nexe binary detected - rebuild required"
            exit 1
          fi
          
          # Check for Node.js runtime errors
          echo "üîç Checking binary integrity..."
          ldd dist/context-provider | head -5
          
          # Try basic execution
          echo "üîß Attempting basic execution..."
          timeout 3 ./dist/context-provider 2>&1 | head -3
        }
        
        # Create minimal test workspace
        mkdir -p test-workspace
        echo "console.log('test');" > test-workspace/test.js
        echo "# Test README" > test-workspace/README.md
        
        # Test init command (should be instant)
        echo "üîß Testing init command..."
        timeout 10 ./dist/context-provider init -w test-workspace 2>&1 | head -10 || {
          EXIT_CODE=$?
          echo "‚ö†Ô∏è Init command failed with exit code $EXIT_CODE"
          
          # Check for specific error patterns
          if timeout 10 ./dist/context-provider init -w test-workspace 2>&1 | grep -q "Invalid Nexe binary"; then
            echo "‚ùå Invalid Nexe binary during init - critical error"
            exit 1
          fi
        }
        
        # Verify config was created
        if [ -f "test-workspace/.context-provider.json" ]; then
          echo "‚úÖ Init command successful"
          cat test-workspace/.context-provider.json
        else
          echo "‚ùå Init command failed - no config file created"
          exit 1
        fi
        
        # Quick process test (don't wait for model download)
        echo "üîÑ Testing process command startup..."
        timeout 30 ./dist/context-provider process -w test-workspace -o test-embeddings 2>&1 | head -10 || {
          EXIT_CODE=$?
          if [ $EXIT_CODE -eq 124 ]; then
            echo "‚ö†Ô∏è Process command timed out (expected - model download)"
            echo "‚úÖ Binary startup successful"
          else
            echo "‚ùå Process command failed with exit code $EXIT_CODE"
            
            # Check for Nexe binary error
            if timeout 30 ./dist/context-provider process -w test-workspace -o test-embeddings 2>&1 | grep -q "Invalid Nexe binary"; then
              echo "‚ùå Invalid Nexe binary during process - critical error"
              exit 1
            fi
          fi
        }
        
        # Check binary integrity
        echo "üîç Binary integrity check..."
        ldd dist/context-provider | head -5
        
        echo "‚úÖ All tests passed successfully!"
        
    - name: Cleanup
      run: |
        rm -rf test-workspace test-embeddings
        
  release:
    runs-on: ubuntu-latest
    needs: [build, test]
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download binary
      uses: actions/download-artifact@v4
      with:
        name: context-provider-binary
        path: dist/
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_TEST }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_TEST }}
        aws-region: eu-north-1
        
    - name: Upload release binary to S3
      run: |
        # Extract version from tag
        VERSION=${GITHUB_REF#refs/tags/}
        
        # Upload versioned binary
        aws s3 cp dist/context-provider s3://test-dev-figma-cs/releases/${VERSION}/context-provider \
          --metadata version=${VERSION},commit=${GITHUB_SHA}
        
        # Upload as stable release
        aws s3 cp dist/context-provider s3://test-dev-figma-cs/releases/stable/context-provider \
          --metadata version=${VERSION},commit=${GITHUB_SHA}
        
        echo "Release binary uploaded to:"
        echo "https://test-dev-figma-cs.s3.eu-north-1.amazonaws.com/releases/${VERSION}/context-provider"
        echo "Stable: https://test-dev-figma-cs.s3.eu-north-1.amazonaws.com/releases/stable/context-provider"
        
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Context Provider ${{ github.ref }}
        body: |
          ## Context Provider ${{ github.ref }}
          
          Binary built and uploaded to S3:
          - Download: https://test-dev-figma-cs.s3.eu-north-1.amazonaws.com/releases/${{ github.ref }}/context-provider
          - Stable: https://test-dev-figma-cs.s3.eu-north-1.amazonaws.com/releases/stable/context-provider
          
          ### Installation
          ```bash
          # Download binary
          curl -o context-provider https://test-dev-figma-cs.s3.eu-north-1.amazonaws.com/releases/${{ github.ref }}/context-provider
          chmod +x context-provider
          
          # Test installation
          ./context-provider --help
          ```
          
          ### Usage
          ```bash
          # Initialize workspace
          ./context-provider init -w /path/to/workspace
          
          # Process workspace
          ./context-provider process -w /path/to/workspace -o ./embeddings
          ```
          
          **Note**: Model (Xenova/all-MiniLM-L6-v2) will be downloaded automatically on first use to `~/.context-provider/models/`
        draft: false
        prerelease: false
